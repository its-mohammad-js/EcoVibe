# GitHub Action to Remove Canceled Orders from the database.

name: Remove Expired Orders

# Trigger the workflow on a push to the main branch and every week.
on:
  push:
    branches: [main] # Run the workflow when changes are pushed to the 'main' branch.
  schedule:
    - cron: "* * */7 * *" # Schedule the workflow to run every week.

jobs:
  clean-expired-orders:
    # Specify the environment where the job runs.
    runs-on: ubuntu-latest # Use the latest Ubuntu environment for running this job.

    steps:
      # Step 1: Check out the repository containing the source code.
      - uses: actions/checkout@v3 # Pull the latest code from the repository.

      # Step 2: Set up Node.js for the workflow.
      - uses: actions/setup-node@v3 # Configure Node.js in the runner environment.
        with:
          node-version: "20" # Specify the Node.js version to use.

      # Step 3: Set Firebase secrets as environment variables.
      - run: |
          echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> $GITHUB_ENV
          echo "FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> $GITHUB_ENV
          echo "FIREBASE_DATABASE_URL=${{ secrets.FIREBASE_DATABASE_URL }}" >> $GITHUB_ENV
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
          echo "FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> $GITHUB_ENV
          echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
          echo "FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> $GITHUB_ENV

      # Step 4: Install Firebase as a dependency.
      - run: npm install firebase # Install the Firebase library to interact with Firebase services.

      # Step 5: Execute the script to remove expired orders.
      - run: node src/common/utils/expired/RemoveExpiredOrders.mjs # Run the Node.js script to clean up orders.
